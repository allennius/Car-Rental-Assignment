@page "/"
@using Car_Rental.Common.Classes.UserInput;
@using System.Globalization;
@inject BookingProcessor br;

<PageTitle>Car Rental Assignment Generics</PageTitle>

<h1>Car Rental Assignment Generics</h1>

<div class="row">

    <div class="alert alert-danger alertVehicleBox col-sm-12 col-xxl-8 @(vi.errorMessage.Equals(string.Empty) ? "visually-hidden" : "")">@vi.errorMessage</div>
    <div class="alert alert-danger alertVehicleBox col-sm-12 col-xxl-8 @(br._error.Equals(string.Empty) ? "visually-hidden" : "")">@br._error</div>
    <div class="alert alert-success alertVehicleBox col-sm-12 col-xxl-8 @(br._message.Equals(string.Empty) ? "visually-hidden" : "")">@br._message</div>
    <div class="border border-dark p-0 col-sm-12 col-xxl-8 overflow-auto d-flex justify-content-center">
        <table class="table table-borderless align-bottom text-center">
            <thead class="m-0 bg-black text-light">
                <tr>
                    <th>RegNO</th>
                    <th>Make</th>
                    <th>Odometer</th>
                    <th>Cost Km</th>
                    <th>Vehicle Type</th>
                    <th>$ Day</th>
                    <th>Action</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input type="text" class="form-control" placeholder="RegNo" @bind="vi.RegNo" disabled="@(br.loading == true ? "disabled" : null)" /></td>
                    <td><input type="text" class="form-control" placeholder="Make" @bind="vi.Make" disabled="@(br.loading == true ? "disabled" : null)" /></td>
                    <td><input type="text" class="form-control" placeholder="Odometer" @bind="vi.Odometer" disabled="@(br.loading == true ? "disabled" : null)" /></td>
                    <td><input type="text" class="form-control" placeholder="CostKm" @bind="vi.CostKM" disabled="@(br.loading == true ? "disabled" : null)" /></td>
                    <td class="col-md-2 col-xl-2">
                        <select class="form-select" disabled="@(br.loading == true ? "disabled" : null)" @bind="vi.VehicleType">
                            @foreach (var type in br.VehicleTypeNames.Reverse())
                            {
                                <option value="@type" disabled="@(VehicleStatuses.None.ToString() == type ? "disabled" : null)">@type</option>
                            }

                        </select>
                    </td>
                    <td><input type="text" class="form-control" placeholder="CostDay" @bind="vi.CostDay" disabled="@(br.loading == true ? "disabled" : null)" /></td>
                    <td>
                        <button class="btn btn-light text-success btn-outline-success" @onclick="(() => { if(vi.isInputs()) br.AddVehicle(vi.Make.ToUpper(), vi.Odometer, vi.CostKM, vi.CostDay, vi.RegNo.ToUpper(), vi.VehicleType); })" disabled="@(br.loading == true ? "disabled" : null)">
                            Add
                        </button>
                    </td>

                    <td><span style="@(br.loading ? "" : "visibility:hidden")" class="badge rounded-pill w-100 bg-warning pulse">Processing</span></td>
                </tr>
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>
                        <div class="d-flex flex-column">
                            <label for="customizedInput">Customer</label>

                            <select class="form-select customizedInput position-relative" disabled="@(br.loading == true ? "disabled" : null)" @bind="rentv.customerId">
                                @foreach (var customer in br.GetCustomers())
                                {
                                    <option value="@customer.Id" >@customer.Name</option>
                                }
                                <option selected disabled>Customer</option>
                            </select>
                        </div>
                    </td>
                </tr>
                @foreach (var vehicle in br.GetVehicles())
                {
                    <tr>
                        <td class="fw-bold">@vehicle.RegNo.ToUpper()</td>
                        <td>@vehicle.Make.ToUpper()</td>
                        <td>@vehicle.Odometer.ToKm()</td>
                        <td>@vehicle.CostKM.ToDollar()</td>
                        <td>@vehicle.VehicleType</td>
                        <td>@vehicle.CostDay.ToDollar()</td>
                        <td>
                            @if (vehicle.Status.Equals(VehicleStatuses.Available))
                            {
                                <button class="btn btn-light text-primary btn-outline-primary" @onclick="() => br.RentVehicle(vehicle.Id, rentv.customerId)" disabled="@(br.loading == true ? "disabled" : null)">Rent</button>
                            }
                            else
                            {
                                <div class="d-flex flex-sm-column flex-xxl-row m-auto align-items-center">
                                    <input type="text" class="customizedInput col-sm-12 col-xxl-6" placeholder="Odometer" @bind="@returnv.odometer" disabled="@(br.loading == true ? "disabled" : null)"  />
                                    <button class="button-next-to-input btn btn-light text-success btn-outline-success col-sm-12 col-xxl-6 " @onclick="() => br.ReturnVehicle(vehicle.Id, returnv.odometer)" disabled="@(br.loading == true ? "disabled" : null)">Return</button>
                                </div>
                            }
                        </td>
                        <td>
                            <span class="btn btn-small rounded-pill w-100 @(vehicle.Status.Equals(VehicleStatuses.Available) ? "btn-dark" : "btn-danger")">@vehicle.Status</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />
<div class="row">
    <div class="border border-dark col-sm-12 col-xxl-8 d-flex justify-content-center overflow-auto">
        <table class="table m-0 align-bottom">
            <thead>
                <tr>
                    <th>RegNo</th>
                    <th>Customer</th>
                    <th>Km Rented</th>
                    <th>Km Returned</th>
                    <th>Rented</th>
                    <th>Returned</th>
                    <th>Cost</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var booking in br.GetBookings())
                {
                    <tr>
                        <td class="fw-bold">@booking.Vehicle.RegNo.ToUpper()</td>
                        <td>@booking.Customer.Name</td>
                        <td>@booking.KmRented.ToKm()</td>
                        <td>@booking.KmReturned?.ToKm()</td>
                        <td>@booking.RentedDate</td>
                        <td style="@(booking.Status.Equals(BookingStatus.Closed) ? "" : "visibility:hidden")">@booking.ReturnDate</td>
                        <td>@booking.Cost?.ToDollar()</td>
                        <td>
                            <span class="btn btn-sm rounded-pill w-100 @(booking.Status.Equals(BookingStatus.Booked) ? "btn-danger" : "btn-success")">
                                @{
                                    string message = booking.Vehicle.Status.Equals(VehicleStatuses.Booked) ? "Open" : "Closed";
                                    @message;
                                }
                            </span>    
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />

<div class="row d-block">
<div class="alert alert-danger alertCustomerBox col-sm-6 col-xl-4 @(ci.errorMessage.Equals(string.Empty) ? "visually-hidden" : "")">@ci.errorMessage</div>
    <div class="border border-dark col-sm-6 col-xl-4">
        <table class="table m-0 align-bottom">
            <thead class="p-0">
                <tr>
                    <th class="fw-bold">SSN</th>
                    <th class="fw-bold">Last Name</th>
                    <th class="fw-bold">First Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input class="form-control" @bind="ci.SSN" placeholder="SSN"/></td>
                    <td><input class="form-control" @bind="ci.FirstName" placeholder="Lastname"/></td>
                    <td><input class="form-control" @bind="ci.LastName" placeholder="Firstname"/></td>
                    <td><button class="btn btn-light btn-success btn-outline-success" @onclick="() => { if (ci.isInputs()) br.AddCustomer(ci.SSN, ci.FirstName, ci.LastName); }" >Add</button></td>
                </tr>
                @foreach (var customer in br.GetCustomers())
                {
                    <tr>
                        <td class="fw-bold">@customer.SSN</td>
                        <td>@customer.LastName</td>
                        <td>@customer.FirstName</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="m-3"></div>


@code{
        NewCustomerInputs ci = new NewCustomerInputs(string.Empty, string.Empty, null);
        NewVehicleInputs vi = new NewVehicleInputs(-1, VehicleTypes.None, 0, 0, string.Empty, string.Empty, 0);
        ReturnVehicle returnv = new();
        RentVehicle rentv = new();
}